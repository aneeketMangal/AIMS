--Create a table of tickets for Dean Academics (and grant access only to dean)
--Write a trigger, whenever a new entry is made in batches table, a table of tickets is created for the batch advisor
--For the batch advisor ticket table, "GRANT --- ON --- TO <batch advisor>"
--i.e. Access should be granted only to batch advisor rather than to faculty
--Similarly, a table can be created/updated for each student whenever he/she raises a ticket (which shows status)
--Constraints to be checked can be that the course must be offered

--

-- ticket history
CREATE TABLE tickets(
    id INTEGER NOT NULL,
    student_id integer NOT NULL,
    course_id integer NOT NULL,
    faculty_ap integer NOT NULL,
    advisor_ap integer NOT NULL, 
    dean_ap integer NOT NULL,
    PRIMARY KEY(id)
);

-- view student's ticket
CREATE OR REPLACE FUNCTION view_ticket_status(
    ticket_id int
)
RETURNS record
AS $_$
DECLARE
    create_table_command text;
    stu_id integer;
    out_record record;
    temp_query text;
    temp_exist boolean;
BEGIN
    temp_query := 'SELECT EXISTS(SELECT 1 from tickets t where t.id = ' || ticket_id || ');';
    EXECUTE temp_query INTO temp_exist;

    if NOT temp_exist then
        RAISE EXCEPTION 'Invalid ticket ID';
    END if;

    stu_id := substr(session_user, 2);
    temp_query := 'SELECT EXISTS(SELECT 1 FROM tickets t WHERE t.id = ' || ticket_id || ' AND t.student_id = ' || stu_id ||');';
    EXECUTE temp_query INTO temp_exist;
    if NOT temp_exist then
        RAISE EXCEPTION 'Unauthorised action.';
    END if;

    temp_query := 'SELECT course_id, faculty_ap, advisor_ap, dean_ap FROM tickets WHERE tickets.id = ' || ticket_id || ';';
    EXECUTE temp_query into out_record;
    RETURN out_record;
END
$_$
LANGUAGE plpgsql
SECURITY DEFINER;

GRANT EXECUTE
ON FUNCTION view_ticket_status
TO student;


--general ticket table template
CREATE OR REPLACE FUNCTION create_ticket_table(
    table_name text
)
RETURNS void
AS $_$
DECLARE
    create_table_command text;
BEGIN
    create_table_command := 'CREATE TABLE ' || table_name || ' (';

    create_table_command := create_table_command || ' id INTEGER NOT NULL,';
    create_table_command := create_table_command || ' student_id char(11) NOT NULL,';
    create_table_command := create_table_command || ' course_id INTEGER NOT NULL,';
    create_table_command := create_table_command || ' PRIMARY KEY(id),';
    create_table_command := create_table_command || ' FOREIGN KEY(id) REFERENCES tickets(id),';
    create_table_command := create_table_command || ' FOREIGN KEY(student_id) REFERENCES students(id),';
    create_table_command := create_table_command || ' FOREIGN KEY(course_id) REFERENCES course_offering(id));';
    EXECUTE create_table_command;
END
$_$
LANGUAGE plpgsql;

--creating dean_tickets_table;
SELECT create_ticket_table('dean_tickets');

GRANT ALL 
ON dean_tickets
TO deanoffice;


-- ticket raise by student
-- defined by superuser
CREATE OR REPLACE FUNCTION raise_ticket(
    offering_id integer
)
RETURNS void
AS $_$
DECLARE
    stu_id integer;
    table_name text;
    ins_id integer;
    insert_command text;
    ticket_id integer;
    temp_query text;
    temp_exist boolean;
BEGIN
    stu_id := substr(session_user, 2);
    temp_query := ('SELECT EXISTS(SELECT 1 FROM course_offering c where c.id = ' || offering_id || ');');
    EXECUTE temp_query INTO temp_exist;
    if NOT temp_exist then
        RAISE EXCEPTION 'Offering not found';
    END if;

    temp_query := ('SELECT c.insid from course_offering c where c.id = ' || offering_id || ';');
    EXECUTE temp_query into ins_id
    table_name := concat('_', ins_id,  '_instructor_tickets');

    temp_query := ('SELECT EXISTS(SELECT 1 FROM ' ||table_name || ' t WHERE t.student_id = ' ||stu_id || ' AND t.course_id = ' || offering_id || ');');
    EXECUTE temp_query INTO temp_exist;
    if temp_exist then
        RAISE EXCEPTION 'Ticket already raised';
    END if;

    ticket_id := (SELECT COUNT(*) from tickets);
    insert_command := 'INSERT INTO tickets VALUES ('  || ticket_id || ',' || stu_id || ',' || offering_id || ', 0, 0, 0)';
    EXECUTE insert_command;
    insert_command := 'INSERT INTO ' || table_name || ' VALUES (' ||ticket_id || ',' || stu_id || ',' || offering_id || ');' ;
    EXECUTE insert_command;

END
$_$
LANGUAGE plpgsql
SECURITY DEFINER;

GRANT EXECUTE
ON FUNCTION raise_ticket
TO student;


CREATE OR REPLACE FUNCTION propagate(
    ticket_id int, 
    table_from text, 
    table_to text
)
RETURNS void
AS $_$
DECLARE
    temp_query text;
BEGIN
    temp_query := 'INSERT INTO ' || table_to || ' SELECT * FROM ' || table_from || ' tf WHERE tf.id = ' || ticket_id || ';';
    EXECUTE temp_query;
    temp_query := 'DELETE FROM ' || table_from || ' tf WHERE tf.id  = ' || ticket_id || ';';
    EXECUTE temp_query;
END
$_$
LANGUAGE plpgsql
SECURITY DEFINER;





-- updation of status of raised ticket by instructor
CREATE OR REPLACE FUNCTION instructor_ticket_response(
    ticket_id integer,
    response boolean
)
RETURNS void
AS $_$
DECLARE
    table_name text;
    department text;
    adv_table_name text;
    ins_id integer;
    update_command text;
    delete_command text;
    temp_query text;
    temp_exist boolean;
BEGIN
    ins_id := CAST(substr(session_user, 2) AS INTEGER);
    table_name := concat('_', ins_id,  '_instructor_tickets');

    temp_query := 'SELECT EXISTS(SELECT 1 FROM tickets t where t.id = ' || ticket_id || ');';
    EXECUTE temp_query into temp_exist;
    if NOT temp_exist then
        RAISE EXCEPTION 'Invalid ticket ID';
    END if;


    temp_query := 'SELECT EXISTS(SELECT 1 FROM ' || table_name ||  't where t.id = ' || ticket_id || ');';
    EXECUTE temp_query into temp_exist;
    if NOT temp_exist then
        RAISE EXCEPTION 'Unauthorized Request';
    END if;

   

    if (response) then
        update_command := 'UPDATE tickets set tickets.faculty_ap = 2 WHERE tickets.id = ticket_id;';
        temp_query := 'SELECT st.batch FROM students st WHERE st.id = (SELECT ti.student_id FROM ' 
        || table_name || ' ti WHERE ti.id = ' || ticket_id || ');';
        EXECUTE temp_query into department;
        adv_table_name := concat('_', department,  '_advisor_tickets');
        EXECUTE update_command;
        EXECUTE propagate(table_name, adv_table_name);
    else
        update_command := 'UPDATE tickets set tickets.faculty_ap = 1 WHERE tickets.id = ticket_id;';
        EXECUTE update_command;
    END if;
END
$_$
LANGUAGE plpgsql
SECURITY DEFINER;

GRANT EXECUTE
ON FUNCTION instructor_ticket_response
TO faculty;


--advisor ticket response function
CREATE OR REPLACE FUNCTION instructor_ticket_response(
    ticket_id integer,
    response boolean
)
RETURNS void
AS $_$
DECLARE
    table_name text;
    batch_ text;
    ins_id integer;
    update_command text;
    delete_command text;
    temp_query text;
    temp_exist boolean;
BEGIN
    ins_id := CAST(substr(session_user, 2) AS INTEGER);
    temp_query := 'SELECT 1 from batches b WHERE b.adv_id = ' || ins_id || ';';
    EXECUTE temp_query INTO temp_exist;
    if NOT temp_exist then
        RAISE EXCEPTION 'Unauthorised Access';
    END if;

    temp_query := '(SELECT b.batch from batches b WHERE b.adv_id = ' || ins_id || ');';
    EXECUTE temp_query INTO batch_;
    table_name := concat('_', batch_,  '_advisor_tickets');

    temp_query := 'SELECT EXISTS(SELECT 1 FROM tickets t where t.id = ' || ticket_id || ');';
    EXECUTE temp_query into temp_exist;
    if NOT temp_exist then
        RAISE EXCEPTION 'Invalid ticket ID';
    END if;


    temp_query := 'SELECT EXISTS(SELECT 1 FROM ' || table_name ||  't where t.id = ' || ticket_id || ');';
    EXECUTE temp_query into temp_exist;
    if NOT temp_exist then
        RAISE EXCEPTION 'Unauthorized Request';
    END if;

    if (response) then
        update_command := 'UPDATE tickets SET tickets.advisor_ap = 2 WHERE tickets.id = ' || ticket_id || ';';
        EXECUTE update_command;
        EXECUTE propagate(table_name, _dean_tickets);
    else
        update_command := 'UPDATE tickets SET tickets.advisor_ap = 1 WHERE tickets.id = ' || ticket_id || ';';
        EXECUTE update_command;
    END if;
END
$_$
LANGUAGE plpgsql
SECURITY DEFINER;

-- to be changed if we want to make a advisor group
GRANT EXECUTE
ON FUNCTION advisor_ticket_response
TO faculty;

-- to be decided if ki dean_tickets wali table rakhni hai kya

CREATE OR REPLACE FUNCTION dean_ticket_response(
    ticket_id integer,
    response boolean
)
RETURNS void
AS $_$
DECLARE
    table_name text;
    update_command text;
    temp_query text;
    temp_exist boolean;
BEGIN
    temp_query := 'SELECT EXISTS(SELECT 1 FROM tickets t where t.id = ' || ticket_id || ');';
    EXECUTE temp_query into temp_exist;
    if NOT temp_exist then
        RAISE EXCEPTION 'Invalid ticket ID';
    END if;

    if (response) then
        update_command := 'UPDATE tickets SET tickets.dean_ap = 2 WHERE tickets.id = ' || ticket_id || ';';
    else
        update_command := 'UPDATE tickets SET tickets.dean_ap = 1 WHERE tickets.id = ' || ticket_id || ';';
    END if;
    EXECUTE update_command;
    DELETE FROM dean_tickets WHERE dean_tickets.id = ticket_id;
    RETURN;
END
$_$
LANGUAGE plpgsql;

GRANT EXECUTE
ON FUNCTION dean_ticket_response
TO dean;
